def calculate_boiling_point_with_pressure(
    normal_boiling_point_c: float, 
    heat_of_vaporization: float,  # in kJ/mol
    initial_pressure: float,      # in atm
    final_pressure: float,        # in atm
) -> Dict[str, Any]:
    """
    Calculate the new boiling point when pressure changes using the Clausius-Clapeyron equation.
    
    Parameters:
        normal_boiling_point_c (float): The normal boiling point in degrees Celsius
        heat_of_vaporization (float): The heat of vaporization in kJ/mol
        initial_pressure (float): The initial pressure in atm
        final_pressure (float): The final pressure in atm
        
    Returns:
        Dict[str, Any]: Dictionary containing results and solution steps
    """
    # Convert boiling point to Kelvin
    normal_boiling_point_k = normal_boiling_point_c + 273.15
    
    # Gas constant in kJ/(mol·K)
    R = R_IDEAL_GAS['kJ/(mol·K)']
    
    # Calculate the new boiling point using the integrated Clausius-Clapeyron equation
    # ln(P2/P1) = -(ΔHvap/R) * (1/T2 - 1/T1)
    # Rearranging: 1/T2 = 1/T1 - (R/ΔHvap) * ln(P2/P1)
    
    # Calculate 1/T2
    inv_t2 = (1/normal_boiling_point_k) - (R/heat_of_vaporization) * math.log(final_pressure/initial_pressure)
    
    # Calculate T2
    new_boiling_point_k = 1/inv_t2
    new_boiling_point_c = new_boiling_point_k - 273.15
    
    # Build solution steps
    steps = [
        f"Step 1: Convert the normal boiling point to Kelvin:",
        f"T₁ = {normal_boiling_point_c} °C + 273.15 = {normal_boiling_point_k:.2f} K",
        f"",
        f"Step 2: Use the Clausius-Clapeyron equation to find the new boiling point:",
        f"ln(P₂/P₁) = -(ΔHvap/R) × (1/T₂ - 1/T₁)",
        f"",
        f"Rearranging for 1/T₂:",
        f"1/T₂ = 1/T₁ - (R/ΔHvap) × ln(P₂/P₁)",
        f"",
        f"Step 3: Substitute the values:",
        f"1/T₂ = 1/{normal_boiling_point_k:.2f} K - ({R:.6f} kJ/(mol·K)/{heat_of_vaporization} kJ/mol) × ln({final_pressure}/{initial_pressure})",
        f"1/T₂ = {1/normal_boiling_point_k:.6f} K⁻¹ - {R/heat_of_vaporization:.6f} × {math.log(final_pressure/initial_pressure):.6f}",
        f"1/T₂ = {1/normal_boiling_point_k:.6f} K⁻¹ - {(R/heat_of_vaporization) * math.log(final_pressure/initial_pressure):.6f} K⁻¹",
        f"1/T₂ = {inv_t2:.6f} K⁻¹",
        f"",
        f"Step 4: Calculate T₂:",
        f"T₂ = 1/({inv_t2:.6f} K⁻¹) = {new_boiling_point_k:.2f} K",
        f"",
        f"Step 5: Convert back to Celsius:",
        f"T₂ = {new_boiling_point_k:.2f} K - 273.15 = {new_boiling_point_c:.2f} °C"
    ]
    
    return {
        "normal_boiling_point_c": normal_boiling_point_c,
        "normal_boiling_point_k": normal_boiling_point_k,
        "heat_of_vaporization": heat_of_vaporization,
        "initial_pressure": initial_pressure,
        "final_pressure": final_pressure,
        "new_boiling_point_k": new_boiling_point_k,
        "new_boiling_point_c": new_boiling_point_c,
        "steps": steps
    }

def calculate_pressure_with_temperature(
    normal_boiling_point_c: float,
    heat_of_vaporization: float,  # in kJ/mol
    initial_pressure: float,      # in atm
    final_temperature_c: float    # in °C
) -> Dict[str, Any]:
    """
    Calculate the vapor pressure at a given temperature using the Clausius-Clapeyron equation.
    
    Parameters:
        normal_boiling_point_c (float): The normal boiling point in degrees Celsius
        heat_of_vaporization (float): The heat of vaporization in kJ/mol
        initial_pressure (float): The initial pressure in atm (typically 1 atm)
        final_temperature_c (float): The temperature at which to calculate the vapor pressure, in °C
        
    Returns:
        Dict[str, Any]: Dictionary containing results and solution steps
    """
    # Convert temperatures to Kelvin
    normal_boiling_point_k = normal_boiling_point_c + 273.15
    final_temperature_k = final_temperature_c + 273.15
    
    # Gas constant in kJ/(mol·K)
    R = R_IDEAL_GAS['kJ/(mol·K)']
    
    # Calculate the new pressure using the integrated Clausius-Clapeyron equation
    # ln(P2/P1) = -(ΔHvap/R) * (1/T2 - 1/T1)
    
    exponent = -(heat_of_vaporization/R) * (1/final_temperature_k - 1/normal_boiling_point_k)
    final_pressure = initial_pressure * math.exp(exponent)
    
    # Build solution steps
    steps = [
        f"Step 1: Convert temperatures to Kelvin:",
        f"T₁ = {normal_boiling_point_c} °C + 273.15 = {normal_boiling_point_k:.2f} K",
        f"T₂ = {final_temperature_c} °C + 273.15 = {final_temperature_k:.2f} K",
        f"",
        f"Step 2: Use the Clausius-Clapeyron equation to find the new pressure:",
        f"ln(P₂/P₁) = -(ΔHvap/R) × (1/T₂ - 1/T₁)",
        f"",
        f"Step 3: Substitute the values:",
        f"ln(P₂/{initial_pressure}) = -({heat_of_vaporization} kJ/mol/{R:.6f} kJ/(mol·K)) × (1/{final_temperature_k:.2f} K - 1/{normal_boiling_point_k:.2f} K)",
        f"ln(P₂/{initial_pressure}) = -{heat_of_vaporization/R:.2f} × ({1/final_temperature_k:.6f} K⁻¹ - {1/normal_boiling_point_k:.6f} K⁻¹)",
        f"ln(P₂/{initial_pressure}) = -{heat_of_vaporization/R:.2f} × {1/final_temperature_k - 1/normal_boiling_point_k:.6f} K⁻¹",
        f"ln(P₂/{initial_pressure}) = {exponent:.6f}",
        f"",
        f"Step 4: Calculate P₂:",
        f"P₂ = {initial_pressure} × e^({exponent:.6f})",
        f"P₂ = {initial_pressure} × {math.exp(exponent):.6f}",
        f"P₂ = {final_pressure:.6f} atm"
    ]
    
    return {
        "normal_boiling_point_c": normal_boiling_point_c,
        "normal_boiling_point_k": normal_boiling_point_k,
        "heat_of_vaporization": heat_of_vaporization,
        "initial_pressure": initial_pressure,
        "final_temperature_c": final_temperature_c,
        "final_temperature_k": final_temperature_k,
        "final_pressure": final_pressure,
        "steps": steps
    }

def calculate_heat_of_vaporization(
    temp1_c: float,
    pressure1: float,  # in atm
    temp2_c: float,
    pressure2: float   # in atm
) -> Dict[str, Any]:
    """
    Calculate the heat of vaporization using two pressure-temperature data points.
    
    Parameters:
        temp1_c (float): First temperature in degrees Celsius
        pressure1 (float): First pressure in atm
        temp2_c (float): Second temperature in degrees Celsius
        pressure2 (float): Second pressure in atm
        
    Returns:
        Dict[str, Any]: Dictionary containing results and solution steps
    """
    # Convert temperatures to Kelvin
    temp1_k = temp1_c + 273.15
    temp2_k = temp2_c + 273.15
    
    # Gas constant in kJ/(mol·K)
    R = R_IDEAL_GAS['kJ/(mol·K)']
    
    # Calculate heat of vaporization using the Clausius-Clapeyron equation
    # ln(P2/P1) = -(ΔHvap/R) * (1/T2 - 1/T1)
    # Rearranging: ΔHvap = -R * ln(P2/P1) / (1/T2 - 1/T1)
    
    heat_of_vaporization = -R * math.log(pressure2/pressure1) / (1/temp2_k - 1/temp1_k)
    
    # Build solution steps
    steps = [
        f"Step 1: Convert temperatures to Kelvin:",
        f"T₁ = {temp1_c} °C + 273.15 = {temp1_k:.2f} K",
        f"T₂ = {temp2_c} °C + 273.15 = {temp2_k:.2f} K",
        f"",
        f"Step 2: Rearrange the Clausius-Clapeyron equation to solve for the heat of vaporization:",
        f"ln(P₂/P₁) = -(ΔHvap/R) × (1/T₂ - 1/T₁)",
        f"ΔHvap = -R × ln(P₂/P₁) / (1/T₂ - 1/T₁)",
        f"",
        f"Step 3: Substitute the values:",
        f"ΔHvap = -{R:.6f} kJ/(mol·K) × ln({pressure2}/{pressure1}) / (1/{temp2_k:.2f} K - 1/{temp1_k:.2f} K)",
        f"ΔHvap = -{R:.6f} kJ/(mol·K) × {math.log(pressure2/pressure1):.6f} / ({1/temp2_k:.6f} K⁻¹ - {1/temp1_k:.6f} K⁻¹)",
        f"ΔHvap = -{R:.6f} kJ/(mol·K) × {math.log(pressure2/pressure1):.6f} / {1/temp2_k - 1/temp1_k:.6f} K⁻¹",
        f"ΔHvap = {heat_of_vaporization:.2f} kJ/mol"
    ]
    
    return {
        "temp1_c": temp1_c,
        "temp1_k": temp1_k,
        "pressure1": pressure1,
        "temp2_c": temp2_c,
        "temp2_k": temp2_k,
        "pressure2": pressure2,
        "heat_of_vaporization": heat_of_vaporization,
        "steps": steps
    }